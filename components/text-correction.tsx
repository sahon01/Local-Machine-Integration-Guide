"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { CheckCircle, AlertCircle, Copy, Download, RefreshCw, FileText, Zap, BookOpen, Languages } from "lucide-react"
import { toast } from "@/hooks/use-toast"

interface Correction {
  type: "spelling" | "grammar" | "style" | "punctuation"
  original: string
  suggestion: string
  position: number
  reason: string
}

export function TextCorrection() {
  const [inputText, setInputText] = useState("")
  const [correctedText, setCorrectedText] = useState("")
  const [corrections, setCorrections] = useState<Correction[]>([])
  const [isProcessing, setIsProcessing] = useState(false)
  const [activeTab, setActiveTab] = useState("editor")

  // Common Bengali spelling mistakes and corrections
  const bengaliCorrections = [
    { wrong: "‡¶Ü‡¶Æ‡¶ø", correct: "‡¶Ü‡¶Æ‡¶ø", type: "spelling" },
    { wrong: "‡¶§‡ßÅ‡¶Æ‡¶ø", correct: "‡¶§‡ßÅ‡¶Æ‡¶ø", type: "spelling" },
    { wrong: "‡¶∏‡ßá", correct: "‡¶∏‡ßá", type: "spelling" },
    { wrong: "‡¶Ü‡¶Æ‡¶∞‡¶æ", correct: "‡¶Ü‡¶Æ‡¶∞‡¶æ", type: "spelling" },
    { wrong: "‡¶§‡ßã‡¶Æ‡¶∞‡¶æ", correct: "‡¶§‡ßã‡¶Æ‡¶∞‡¶æ", type: "spelling" },
    { wrong: "‡¶§‡¶æ‡¶∞‡¶æ", correct: "‡¶§‡¶æ‡¶∞‡¶æ", type: "spelling" },
    // Add more corrections as needed
  ]

  // Common English spelling mistakes and corrections
  const englishCorrections = [
    { wrong: "recieve", correct: "receive", type: "spelling" },
    { wrong: "seperate", correct: "separate", type: "spelling" },
    { wrong: "definately", correct: "definitely", type: "spelling" },
    { wrong: "occured", correct: "occurred", type: "spelling" },
    { wrong: "begining", correct: "beginning", type: "spelling" },
    { wrong: "accomodate", correct: "accommodate", type: "spelling" },
    { wrong: "neccessary", correct: "necessary", type: "spelling" },
    { wrong: "embarass", correct: "embarrass", type: "spelling" },
    { wrong: "maintainance", correct: "maintenance", type: "spelling" },
    { wrong: "existance", correct: "existence", type: "spelling" },
  ]

  const processText = async () => {
    if (!inputText.trim()) {
      toast({
        title: "‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø!",
        description: "‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§",
        variant: "destructive",
      })
      return
    }

    setIsProcessing(true)

    // Simulate processing delay
    await new Promise((resolve) => setTimeout(resolve, 1500))

    let processedText = inputText
    const foundCorrections: Correction[] = []

    // Check for spelling mistakes
    const allCorrections = [...bengaliCorrections, ...englishCorrections]

    allCorrections.forEach((correction) => {
      const regex = new RegExp(`\\b${correction.wrong}\\b`, "gi")
      const matches = [...inputText.matchAll(regex)]

      matches.forEach((match) => {
        if (match.index !== undefined) {
          foundCorrections.push({
            type: correction.type as any,
            original: match[0],
            suggestion: correction.correct,
            position: match.index,
            reason: `"${correction.wrong}" ‡¶è‡¶∞ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶¨‡¶æ‡¶®‡¶æ‡¶® "${correction.correct}"`,
          })

          processedText = processedText.replace(match[0], correction.correct)
        }
      })
    })

    // Check for basic grammar issues
    const grammarChecks = [
      {
        pattern: /\s+/g,
        replacement: " ",
        reason: "‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶∏‡ßç‡¶™‡ßá‡¶∏ ‡¶∏‡¶∞‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
      },
      {
        pattern: /\.{2,}/g,
        replacement: "...",
        reason: "‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶°‡¶ü ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
      },
      {
        pattern: /\?{2,}/g,
        replacement: "?",
        reason: "‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶¨‡ßã‡¶ß‡¶ï ‡¶ö‡¶ø‡¶π‡ßç‡¶® ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
      },
      {
        pattern: /!{2,}/g,
        replacement: "!",
        reason: "‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶¨‡¶ø‡¶∏‡ßç‡¶Æ‡¶Ø‡¶º‡¶¨‡ßã‡¶ß‡¶ï ‡¶ö‡¶ø‡¶π‡ßç‡¶® ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
      },
    ]

    grammarChecks.forEach((check) => {
      const matches = [...processedText.matchAll(check.pattern)]
      matches.forEach((match) => {
        if (match.index !== undefined && match[0] !== check.replacement) {
          foundCorrections.push({
            type: "punctuation",
            original: match[0],
            suggestion: check.replacement,
            position: match.index,
            reason: check.reason,
          })
        }
      })
      processedText = processedText.replace(check.pattern, check.replacement)
    })

    // Check for style improvements
    if (processedText.length > 0) {
      // Capitalize first letter if not already
      if (processedText[0] !== processedText[0].toUpperCase()) {
        foundCorrections.push({
          type: "style",
          original: processedText[0],
          suggestion: processedText[0].toUpperCase(),
          position: 0,
          reason: "‡¶¨‡¶æ‡¶ï‡ßç‡¶Ø‡ßá‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ‡¶§‡ßá ‡¶¨‡¶°‡¶º ‡¶π‡¶æ‡¶§‡ßá‡¶∞ ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®",
        })
        processedText = processedText[0].toUpperCase() + processedText.slice(1)
      }
    }

    setCorrections(foundCorrections)
    setCorrectedText(processedText)
    setIsProcessing(false)
    setActiveTab("results")

    toast({
      title: "‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶® ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®! ‚úÖ",
      description: `${foundCorrections.length}‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶® ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá‡•§`,
    })
  }

  const applySuggestion = (index: number) => {
    const correction = corrections[index]
    const newText = correctedText.replace(correction.original, correction.suggestion)
    setCorrectedText(newText)

    // Remove the applied correction
    setCorrections((prev) => prev.filter((_, i) => i !== index))

    toast({
      title: "‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶® ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‚úÖ",
      description: `"${correction.original}" ‡¶ï‡ßá "${correction.suggestion}" ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§`,
    })
  }

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text)
    toast({
      title: "‡¶ï‡¶™‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! üìã",
      description: "‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶ï‡ßç‡¶≤‡¶ø‡¶™‡¶¨‡ßã‡¶∞‡ßç‡¶°‡ßá ‡¶ï‡¶™‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
    })
  }

  const downloadText = (text: string, filename: string) => {
    const blob = new Blob([text], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = filename
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)

    toast({
      title: "‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! üì•",
      description: "‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
    })
  }

  const resetEditor = () => {
    setInputText("")
    setCorrectedText("")
    setCorrections([])
    setActiveTab("editor")
  }

  const getCorrectionTypeColor = (type: string) => {
    switch (type) {
      case "spelling":
        return "bg-red-100 text-red-800"
      case "grammar":
        return "bg-orange-100 text-orange-800"
      case "style":
        return "bg-blue-100 text-blue-800"
      case "punctuation":
        return "bg-purple-100 text-purple-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const getCorrectionTypeText = (type: string) => {
    switch (type) {
      case "spelling":
        return "‡¶¨‡¶æ‡¶®‡¶æ‡¶®"
      case "grammar":
        return "‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶∞‡¶£"
      case "style":
        return "‡¶∏‡ßç‡¶ü‡¶æ‡¶á‡¶≤"
      case "punctuation":
        return "‡¶Ø‡¶§‡¶ø‡¶ö‡¶ø‡¶π‡ßç‡¶®"
      default:
        return "‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø"
    }
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold">‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶®</h2>
          <p className="text-gray-600">‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶¨‡¶æ‡¶®‡¶æ‡¶®, ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶∞‡¶£ ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßç‡¶ü‡¶æ‡¶á‡¶≤ ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶®</p>
        </div>
        <div className="flex gap-2">
          <Button onClick={resetEditor} variant="outline">
            <RefreshCw className="h-4 w-4 mr-2" />
            ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü
          </Button>
        </div>
      </div>

      {/* Stats */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-4 text-center">
            <div className="text-2xl font-bold text-blue-600">{inputText.length}</div>
            <div className="text-sm text-gray-600">‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞</div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4 text-center">
            <div className="text-2xl font-bold text-green-600">{inputText.split(/\s+/).filter((w) => w).length}</div>
            <div className="text-sm text-gray-600">‡¶∂‡¶¨‡ßç‡¶¶</div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4 text-center">
            <div className="text-2xl font-bold text-orange-600">{corrections.length}</div>
            <div className="text-sm text-gray-600">‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶®</div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4 text-center">
            <div className="text-2xl font-bold text-purple-600">
              {inputText.split(/[.!?]+/).filter((s) => s.trim()).length}
            </div>
            <div className="text-sm text-gray-600">‡¶¨‡¶æ‡¶ï‡ßç‡¶Ø</div>
          </CardContent>
        </Card>
      </div>

      {/* Main Content */}
      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-4">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="editor" className="flex items-center gap-2">
            <FileText className="h-4 w-4" />
            ‡¶è‡¶°‡¶ø‡¶ü‡¶∞
          </TabsTrigger>
          <TabsTrigger value="results" className="flex items-center gap-2">
            <CheckCircle className="h-4 w-4" />
            ‡¶´‡¶≤‡¶æ‡¶´‡¶≤
          </TabsTrigger>
          <TabsTrigger value="suggestions" className="flex items-center gap-2">
            <Zap className="h-4 w-4" />
            ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂
          </TabsTrigger>
        </TabsList>

        {/* Editor Tab */}
        <TabsContent value="editor">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <FileText className="h-5 w-5" />
                ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶è‡¶°‡¶ø‡¶ü‡¶∞
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <Textarea
                placeholder="‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®... (‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø ‡¶â‡¶≠‡¶Ø‡¶º ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡ßá)"
                value={inputText}
                onChange={(e) => setInputText(e.target.value)}
                className="min-h-[300px]"
              />

              <div className="flex gap-2">
                <Button onClick={processText} disabled={isProcessing || !inputText.trim()} className="flex-1">
                  {isProcessing ? (
                    <>
                      <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                      ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ï‡¶∞‡¶£...
                    </>
                  ) : (
                    <>
                      <Zap className="h-4 w-4 mr-2" />
                      ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
                    </>
                  )}
                </Button>

                <Button variant="outline" onClick={() => copyToClipboard(inputText)} disabled={!inputText.trim()}>
                  <Copy className="h-4 w-4 mr-2" />
                  ‡¶ï‡¶™‡¶ø
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Results Tab */}
        <TabsContent value="results">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Original Text */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <FileText className="h-5 w-5" />
                  ‡¶Æ‡ßÇ‡¶≤ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="p-4 bg-gray-50 rounded border min-h-[300px] whitespace-pre-wrap">
                  {inputText || "‡¶ï‡ßã‡¶® ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶®‡ßá‡¶á"}
                </div>
                <div className="flex gap-2 mt-4">
                  <Button variant="outline" size="sm" onClick={() => copyToClipboard(inputText)} disabled={!inputText}>
                    <Copy className="h-4 w-4 mr-2" />
                    ‡¶ï‡¶™‡¶ø
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => downloadText(inputText, "original-text.txt")}
                    disabled={!inputText}
                  >
                    <Download className="h-4 w-4 mr-2" />
                    ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Corrected Text */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <CheckCircle className="h-5 w-5 text-green-600" />
                  ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶ø‡¶§ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="p-4 bg-green-50 rounded border min-h-[300px] whitespace-pre-wrap">
                  {correctedText || "‡¶è‡¶ñ‡¶®‡ßã ‡¶ï‡ßã‡¶® ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø"}
                </div>
                <div className="flex gap-2 mt-4">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => copyToClipboard(correctedText)}
                    disabled={!correctedText}
                  >
                    <Copy className="h-4 w-4 mr-2" />
                    ‡¶ï‡¶™‡¶ø
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => downloadText(correctedText, "corrected-text.txt")}
                    disabled={!correctedText}
                  >
                    <Download className="h-4 w-4 mr-2" />
                    ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        {/* Suggestions Tab */}
        <TabsContent value="suggestions">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <AlertCircle className="h-5 w-5" />
                ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶®‡ßá‡¶∞ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂
              </CardTitle>
            </CardHeader>
            <CardContent>
              {corrections.length > 0 ? (
                <div className="space-y-4">
                  {corrections.map((correction, index) => (
                    <div key={index} className="p-4 border rounded-lg">
                      <div className="flex justify-between items-start mb-2">
                        <div className="flex items-center gap-2">
                          <Badge className={getCorrectionTypeColor(correction.type)} variant="outline">
                            {getCorrectionTypeText(correction.type)}
                          </Badge>
                          <span className="text-sm text-gray-500">‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶®: {correction.position}</span>
                        </div>
                        <Button size="sm" onClick={() => applySuggestion(index)}>
                          ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
                        </Button>
                      </div>

                      <div className="space-y-2">
                        <div className="flex items-center gap-2">
                          <span className="text-sm font-medium">‡¶≠‡ßÅ‡¶≤:</span>
                          <code className="px-2 py-1 bg-red-100 text-red-800 rounded text-sm">
                            {correction.original}
                          </code>
                        </div>
                        <div className="flex items-center gap-2">
                          <span className="text-sm font-medium">‡¶∏‡¶†‡¶ø‡¶ï:</span>
                          <code className="px-2 py-1 bg-green-100 text-green-800 rounded text-sm">
                            {correction.suggestion}
                          </code>
                        </div>
                        <div className="text-sm text-gray-600">
                          <span className="font-medium">‡¶ï‡¶æ‡¶∞‡¶£:</span> {correction.reason}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-12 text-gray-500">
                  <CheckCircle className="h-12 w-12 mx-auto mb-4 opacity-50" />
                  <h3 className="text-lg font-semibold mb-2">‡¶ï‡ßã‡¶® ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶® ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø</h3>
                  <p>‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶è‡¶ñ‡¶®‡ßã ‡¶ï‡ßã‡¶® ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø‡•§</p>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Tips */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <BookOpen className="h-5 w-5" />
            ‡¶ü‡¶ø‡¶™‡¶∏ ‡¶è‡¶¨‡¶Ç ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <h4 className="font-medium flex items-center gap-2">
                <Languages className="h-4 w-4" />
                ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü
              </h4>
              <ul className="text-sm text-gray-600 space-y-1">
                <li>‚Ä¢ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø ‡¶â‡¶≠‡¶Ø‡¶º ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡ßá</li>
                <li>‚Ä¢ ‡¶Æ‡¶ø‡¶∂‡ßç‡¶∞ ‡¶≠‡¶æ‡¶∑‡¶æ‡¶∞ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá</li>
                <li>‚Ä¢ ‡¶á‡¶â‡¶®‡¶ø‡¶ï‡ßã‡¶° ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶∏‡¶π</li>
              </ul>
            </div>
            <div className="space-y-2">
              <h4 className="font-medium flex items-center gap-2">
                <Zap className="h-4 w-4" />
                ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞
              </h4>
              <ul className="text-sm text-gray-600 space-y-1">
                <li>‚Ä¢ ‡¶¨‡¶æ‡¶®‡¶æ‡¶® ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶®</li>
                <li>‚Ä¢ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶∞‡¶£ ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ</li>
                <li>‚Ä¢ ‡¶Ø‡¶§‡¶ø‡¶ö‡¶ø‡¶π‡ßç‡¶® ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶®</li>
                <li>‚Ä¢ ‡¶∏‡ßç‡¶ü‡¶æ‡¶á‡¶≤ ‡¶â‡¶®‡ßç‡¶®‡¶§‡¶ø</li>
              </ul>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
